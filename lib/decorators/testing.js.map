{"version":3,"sources":["../../src/decorators/testing.js"],"names":["TestClass","Mock","Test","Before","InjectMocks","objectToTest","mocksToInject","testClass","nodeSpringUtil","isClass","NodeSpringException","testClassObj","className","constructor","name","logging","log","clc","blue","bold","yellow","classProp","dependencies","dataType","error","type","path","basename","instance","used","testClassProperty","testingMethods","Object","getOwnPropertyNames","prototype","beforeMethods","filter","method","beforeMethod","testMethods","testMethod","promises","methodStatus","success","failed","passedSymbol","process","platform","failedSymbol","tick","t","Tick","start","forEach","promise","Promise","resolve","reject","assertInstance","assign","assert","done","ok","lastStack","red","push","green","err","all","then","values","stop","timeStr","timers","parse","duration","length","moduleType","target","property","descriptor","interfaceMethods","mockInstance","writable","packagePath","value","metaInstance","ModuleContainer","getModuleContainer","interfacePackagePath","impl"],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * Testing decorators\n * @author calbertts\n */\n\nimport clc from 'cli-color'\nimport t from 'exectimer'\nimport path from 'path'\nimport assert from '../core/assert'\n\nimport ModuleContainer from '../core/ModuleContainer'\nimport nodeSpringUtil from '../core/nodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\n\n\nlet objectToTest = null\nlet mocksToInject = {}\n\n\nexport function TestClass(testClass) {\n  if(!testClass || !nodeSpringUtil.isClass(testClass)) {\n    throw new NodeSpringException('@TestClass expects a Class but an ' + testClass + ' was received.', this, 2)\n  }\n\n  let testClassObj = new testClass()\n  let className = testClassObj.constructor.name\n\n  nodeSpringUtil.logging = true\n  nodeSpringUtil.log(clc.blue.bold('NodeSpring Unit Test Runner:', clc.yellow(className, '\\n')))\n\n  // Inject mocks into the object to test\n  for(let classProp in objectToTest.dependencies) {\n    let dataType = objectToTest.dependencies[classProp]\n\n    if(!mocksToInject[dataType]) {\n      nodeSpringUtil.error(clc.yellow.bold('  WARNING:'), clc.yellow('There isn\\'t a mock for the dependency injected in ' + objectToTest.type.name + '.' + classProp + ' (' + path.basename(dataType) + ')\\n           An empty object will be provided, but tests can fail\\n'))\n      objectToTest.instance[classProp] = {}\n    } else {\n      objectToTest.instance[classProp] = mocksToInject[dataType].instance\n      mocksToInject[dataType].used = true\n      testClassObj[mocksToInject[dataType].testClassProperty] = mocksToInject[dataType].instance\n    }\n  }\n\n  // Check for mocks which aren't required\n  for(let dataType in mocksToInject) {\n    if(mocksToInject[dataType] && !mocksToInject[dataType].used) {\n      nodeSpringUtil.error(clc.yellow.bold('  WARNING:'), clc.yellow('The declared mock for ' + testClass.name + '.' + mocksToInject[dataType].testClassProperty + ' is not required on ' + objectToTest.instance.constructor.name + '\\n'))\n    }\n  }\n\n  testClassObj[objectToTest.testClassProperty] = objectToTest.instance\n\n  let testingMethods = Object.getOwnPropertyNames(testClass.prototype)\n\n  // Running all methods\n  let beforeMethods = testingMethods.filter((method) => {return testClassObj[method].beforeMethod === true})\n  let testMethods = testingMethods.filter((method) => {return testClassObj[method].testMethod === true})\n  let promises = []\n  let methodStatus = {\n    success: [],\n    failed: []\n  }\n  let passedSymbol = process.platform === 'win32' ? 'OK' : '✔'\n  let failedSymbol = process.platform === 'win32' ? 'FAIL' : '✘'\n\n  let tick = new t.Tick(className)\n  tick.start()\n\n  testMethods.forEach((method) => {\n    beforeMethods.forEach((beforeMethod) => {\n      testClassObj[beforeMethod]()\n    })\n\n    let promise = new Promise((resolve, reject) => {\n\n      let assertInstance = {}\n      Object.assign(assertInstance, assert)\n\n      assertInstance.done = () => {\n        if(assertInstance.ok.lastStack) {\n\n          nodeSpringUtil.log(clc.red('  ' + clc.red.bold(failedSymbol), method))\n          nodeSpringUtil.log(clc.red('   ', assertInstance.ok.lastStack), '\\n')\n\n          methodStatus.failed.push(method)\n          resolve()\n          assertInstance.ok.lastStack = null\n        } else {\n          nodeSpringUtil.log(clc.green('  ' + clc.green.bold(passedSymbol), method), '\\n')\n\n          methodStatus.success.push(method)\n          resolve()\n        }\n      }\n\n      // Execute real method\n      try {\n        testClassObj[method](assertInstance)\n      } catch(err) {\n        nodeSpringUtil.log(clc.red('  ' + clc.red.bold(failedSymbol), method))\n        nodeSpringUtil.log(clc.red('   ', err), '\\n')\n\n        methodStatus.failed.push(method)\n        resolve()\n      }\n    })\n\n    promises.push(promise)\n  })\n\n  Promise.all(promises).then((values) => {\n    tick.stop()\n\n    let timeStr = t.timers[className].parse(t.timers[className].duration())\n\n    if(methodStatus.failed.length > 0)\n      nodeSpringUtil.log(' ', clc.red(methodStatus.failed.length, 'of', testMethods.length, 'tests failed for ' + clc.red.bold(className)))\n    else\n      nodeSpringUtil.log(' ', clc.blue('All tests for ' + clc.blue.bold(className) + ' have passed!'))\n\n    nodeSpringUtil.log(clc.blue.bold('  Time:'), clc.yellow(timeStr), '\\n')\n  })\n}\n\n\nexport function Mock(type) {\n  if(!type || !nodeSpringUtil.isClass(type)) {\n    throw new NodeSpringException('@Mock expects an Interface but an ' + type + ' was received.', this, 2)\n  }\n\n  if(type.moduleType !== 'interface' && type.moduleType !== 'service') {\n    throw new NodeSpringException('Mock expects an Interface or a Service as a parameter, instead ' + (type.name ? type.name : 'unknown') + ' was received', this, 2)\n  }\n\n  return (target, property, descriptor) => {\n    let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n    let mockInstance = {}\n\n    interfaceMethods.forEach((method) => {\n      mockInstance[method] = () => {}\n    })\n\n    descriptor.writable = true\n\n    mocksToInject[type.packagePath] = {\n      testClassProperty: property,\n      used: false,\n      instance: mockInstance\n    }\n  }\n}\n\n\nexport function Test(target, property, descriptor) {\n  if(typeof target[property] !== 'function') {\n    throw new NodeSpringException('@Test expects a method but an ' + descriptor.value + ' was received.', this, 2)\n  }\n\n  descriptor.value.testMethod = true\n}\n\n\nexport function Before(target, property, descriptor) {\n  if(typeof target[property] !== 'function') {\n    throw new NodeSpringException('@Before expects a method but an ' + descriptor.value + ' was received.', this, 2)\n  }\n\n  descriptor.value.beforeMethod = true\n}\n\n\nexport function InjectMocks(type) {\n  if(!type || !nodeSpringUtil.isClass(type)) {\n    throw new NodeSpringException('@InjectMocks expects an Implementation but an ' + type + ' was received.', this, 2)\n  }\n\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let metaInstance\n    let instance\n\n    switch(type.moduleType) {\n\n      case 'implementation' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.interfacePackagePath]\n        instance = metaInstance.impl\n      break\n\n      case 'service' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.packagePath]\n        instance = metaInstance.impl\n      break\n\n      case 'controller' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.packagePath]\n        instance = metaInstance.impl\n      break\n    }\n\n    objectToTest = {\n      type: type,\n      testClassProperty: property,\n      instance: instance,\n      dependencies: metaInstance.dependencies\n    }\n  }\n}"]}