{"version":3,"sources":["../../src/decorators/httpMethods.js"],"names":["Get","Post","basePackagePath","path","dirname","nodeSpringUtil","getStack","replace","ModuleContainer","appDir","options","contentType","addRoute","target","property","descriptor","packagePath","constructor","name","arguments","length","NodeSpringException"],"mappings":"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","file":"httpMethods.js","sourcesContent":["/**\n * Decorators for HTTP Methods\n * @author calbertts\n */\n\nimport ModuleContainer from '../core/ModuleContainer'\nimport nodeSpringUtil from '../core/nodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\nimport path from 'path'\n\n\nexport function Get() {\n\n  let basePackagePath = path.dirname(nodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', ''))\n  let options = {\n    contentType: 'text/html'\n  }\n\n  let addRoute = (target, property, descriptor) => {\n    let packagePath = basePackagePath + '/' + target.constructor.name\n\n    target.packagePath = packagePath\n    ModuleContainer.addRoute(target, property, 'get', options.contentType)\n  }\n\n  if(arguments.length <= 1) {\n    if(typeof arguments[0] !== 'object') {\n      throw new NodeSpringException('The options passed to @Get are not valid', this, 2)\n    }\n\n    options = arguments[0] || {}\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\n\n    return addRoute\n  } else {\n    let target = arguments[0]\n    let property = arguments[1]\n    let descriptor = arguments[2]\n\n    if(typeof target[property] !== 'function') {\n      throw new NodeSpringException('@Get expects a method but \"' + property + '\" was received.', this, 2)\n    }\n\n    addRoute(target, property, descriptor)\n  }\n}\n\nexport function Post() {\n\n  let basePackagePath = path.dirname(nodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', ''))\n  let options = {\n    contentType: 'text/html'\n  }\n\n  let addRoute = (target, property, descriptor) => {\n    let packagePath = basePackagePath + '/' + target.constructor.name\n\n    target.packagePath = packagePath\n    ModuleContainer.addRoute(target, property, 'post', options.contentType)\n  }\n\n  if(arguments.length <= 1) {\n    if(typeof arguments[0] !== 'object') {\n      throw new NodeSpringException('The options passed to @Post is not valid', this, 2)\n    }\n\n    options = arguments[0] || {}\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\n\n    return addRoute\n  } else {\n    let target = arguments[0]\n    let property = arguments[1]\n    let descriptor = arguments[2]\n\n    if(typeof target[property] !== 'function') {\n      throw new NodeSpringException('@Post expects a method but \"' + property + '\" was received.', this, 2)\n    }\n\n    addRoute(target, property, descriptor)\n  }\n}"]}