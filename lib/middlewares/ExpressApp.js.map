{"version":3,"sources":["../../src/middlewares/ExpressApp.js"],"names":["ExpressApp","config","socketListeners","configExpressApp","method","url","callback","expressApp","namespace","instance","forEach","socketListenerData","events","eventName","methodName","request","clientData","body","query","response","contentType","data","json","send","port","hostname","https","server","createServer","http","loadbalancer","sticky","listen","once","console","log","bindURL","req","res","rootController","cluster","on","worker","id","fork","io","require","namespaceData","scope","of","clientsNamespace","socket","onConnection","call","NodeSpringApp"],"mappings":"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","file":"ExpressApp.js","sourcesContent":["/**\n * Express Middleware\n * @author calbertts\n */\n\nimport NodeSpringApp from '../core/NodeSpringApp'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport express from 'express'\nimport cluster from 'cluster'\nimport sticky from 'sticky-session'\nimport http from 'http'\nimport https from 'https'\nimport fs from 'fs'\n\n\nexport default class ExpressApp extends NodeSpringApp {\n\n  constructor(config) {\n    super(config)\n\n    this.socketListeners = {}\n    this.configExpressApp()\n  }\n\n  bindURL(method, url, callback) {\n    this.expressApp[method](url, callback)\n  }\n\n  addSocketListeners(namespace, socketListeners, instance) {\n    socketListeners.forEach((socketListenerData) => {\n      if(namespace in this.socketListeners) {\n        this.socketListeners[namespace].instance = instance\n        this.socketListeners[namespace].events[socketListenerData.eventName] = instance[socketListenerData.methodName]\n      } else {\n        this.socketListeners[namespace] = {\n          instance: instance,\n          events: {\n            [socketListenerData.eventName]: instance[socketListenerData.methodName]\n          }\n        }\n      }\n    })\n  }\n\n  getRequestParams(request, callback) {\n    let clientData = request.body || request.query\n    callback(clientData)\n  }\n\n  setContentTypeResponse(response, contentType) {\n    response.contentType(contentType || 'text/html')\n  }\n\n  sendJSONResponse(response, data) {\n    response.json(data)\n  }\n\n  sendDataResponse(response, data) {\n    response.send(data)\n  }\n\n  configExpressApp() {\n    const port = this.config.port\n    const hostname = this.config.hostname || 'localhost'\n\n    this.expressApp = express()\n\n    if(this.config.https) {\n      this.server = https.createServer(this.config.https, this.expressApp)\n    } else {\n      this.server = http.createServer(this.expressApp)\n    }\n\n    if(this.config.loadbalancer) {\n      if (!sticky.listen(this.server, port)) {\n        this.server.once('listening', () => {\n          console.log(`Server running at http://${hostname}:${port}`)\n        })\n      } else {\n        this.bindURL('get', '/', (req, res) => {\n          if(this.config.rootController)\n            this.config.rootController(req, res)\n          else\n            res.send('')\n        })\n      }\n\n      cluster.on('exit', function (worker) {\n        console.log('Worker %d died :(', worker.id)\n        cluster.fork()\n      })\n    } else {\n      this.bindURL('get', '/', (req, res) => {\n        if(this.config.rootController)\n          this.config.rootController(req, res)\n        else\n          res.send('')\n      })\n\n      this.server.listen(port, hostname, () => {\n        console.log(`Server running at http://${hostname}:${port}`)\n      })\n    }\n  }\n\n  configureSocketListeners() {\n    this.io = require('socket.io')(this.server)\n\n    let socketListeners = this.socketListeners\n\n    for(let namespace in socketListeners) {\n      let namespaceData = socketListeners[namespace]\n      let scope = this.io.of(namespace)\n      namespaceData.instance.clientsNamespace = scope\n\n      scope.on('connection', (socket) => {\n        if('onConnection' in namespaceData.instance) {\n          namespaceData.instance.onConnection(socket, scope)\n        }\n\n        for(let eventName in namespaceData.events) {\n          socket.on(eventName, (data) => {\n            let instance = namespaceData.instance\n            let method = namespaceData.events[eventName]\n\n            method.call(instance, data, socket, scope)\n          })\n        }\n      })\n    }\n  }\n}"]}