{"version":3,"sources":["../../src/core/ModuleContainer.js"],"names":["global","modulesContainer","ModuleContainer","appDir","nodeSpringApp","implConfig","logging","loggingSync","debugging","nodeSpringUtil","configureLoggingOut","load","path","stat","fs","lstatSync","isDirectory","files","readdirSync","f","l","length","i","path_module","join","extname","require","e","NodeSpringException","message","baseDir","configureSocketListeners","moduleDef","moduleName","packagePath","addInterface","impl","moduleType","resolveDependencies","namespace","moduleInfo","processRequest","req","res","methodInfo","fn","methodName","getRequestParams","params","fullParams","getArgs","map","item","index","Array","handleResponse","data","setContentTypeResponse","contentType","sendJSONResponse","sendDataResponse","request","response","value","apply","undefined","Promise","then","catch","err","addSocketListeners","socketListeners","bindURL","methods","forEach","httpMethod","push","options","eventName","type","interfaceMethods","Object","getOwnPropertyNames","prototype","implementationMethods","filter","isMethodImplemented","indexOf","errorMessage","name","methodNotImplemented","addImplementation","throwNodeSpringException","param","implMethodParams","isParamPresent","missingParam","dependencies","postInjectMethodExecuted","getInstance","keys","dependenciesInstancesPromises","mapImplVariable","property","moduleNeeded","promise","resolve","reject","all","instances","mainInstance","scope","instanceToInject","varType","constructor","interfacePackagePath","postInjectMethod","error","observe","changes","change","instance","typeToInject","validateImpl","addSocketListener"],"mappings":"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","file":"ModuleContainer.js","sourcesContent":["/**\n * ModuleContainer\n * @author calbertts\n *\n * This class handles all the stuff relates with:\n *\n *    Controllers and HTTP methods\n *    Dependency Injection\n */\n\nimport fs from 'fs'\nimport path_module from 'path'\nimport nodeSpringUtil from './nodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\n\nglobal.modulesContainer = {}\nlet modulesContainer = global.modulesContainer\n\nexport default class ModuleContainer {\n\n  static appDir = null\n  static implConfig = {}\n  static nodeSpringApp = {\n    bindURL: () => {},\n    addSocketListener: () => {},\n    addSocketListeners: () => {}\n  }\n\n  static init(appDir, nodeSpringApp, implConfig, logging = false, loggingSync = false, debugging = false) {\n    nodeSpringUtil.logging = logging\n    nodeSpringUtil.configureLoggingOut(loggingSync)\n    nodeSpringUtil.debugging = debugging\n\n    ModuleContainer.appDir = appDir\n    ModuleContainer.implConfig = implConfig\n    ModuleContainer.nodeSpringApp = nodeSpringApp || ModuleContainer.nodeSpringApp\n  }\n\n  static loadModules() {\n    let load = (path) => {\n      try {\n        let stat = fs.lstatSync(path)\n\n        if (stat.isDirectory()) {\n          let files = fs.readdirSync(path)\n          let f, l = files.length\n          for (let i = 0; i<l; i++) {\n            f = path_module.join(path, files[i])\n            load(f)\n          }\n        } else {\n          if(path_module.extname(path) === '.js') {\n            require(path)\n          }\n        }\n      } catch(e) {\n        throw new NodeSpringException(e.message, this)\n      }\n    }\n\n    let baseDir = path_module.join(ModuleContainer.appDir)\n    load(baseDir)\n\n    // All metadata is loaded except the injected instances\n    ModuleContainer.nodeSpringApp.configureSocketListeners()\n  }\n\n  static addService(moduleDef) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n    modulesContainer[moduleName].impl = new moduleDef()\n    modulesContainer[moduleName].impl.packagePath = moduleDef.packagePath\n    modulesContainer[moduleName].moduleType = moduleDef.moduleType\n\n    ModuleContainer.resolveDependencies(moduleName)\n  }\n\n  static addController(moduleDef, path, namespace) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n    modulesContainer[moduleName].path = path\n    modulesContainer[moduleName].impl = new moduleDef()\n    modulesContainer[moduleName].impl.packagePath = moduleDef.packagePath\n    modulesContainer[moduleName].moduleType = moduleDef.moduleType\n\n    ModuleContainer.resolveDependencies(moduleName)\n\n    let moduleInfo = modulesContainer[moduleName]\n\n    let processRequest = (req, res, methodInfo) => {\n      let fn = moduleInfo.impl[methodInfo.methodName]\n\n      ModuleContainer.nodeSpringApp.getRequestParams(req, (params) => {\n        let fullParams = nodeSpringUtil.getArgs(fn).map((item, index) => {\n          return params[item] || (params[item + '[]'] instanceof Array ? params[item + '[]'] : [params[item + '[]']])\n        })\n\n        let handleResponse = (data) => {\n          ModuleContainer.nodeSpringApp.setContentTypeResponse(res, methodInfo.contentType)\n\n          if(methodInfo.contentType === 'application/json') {\n            ModuleContainer.nodeSpringApp.sendJSONResponse(res, data)\n          } else {\n            ModuleContainer.nodeSpringApp.sendDataResponse(res, data)\n          }\n        }\n\n        // Getting method response\n        fn.request = req\n        fn.response = res\n        let value = fn.apply(moduleInfo.impl, fullParams)\n\n        // Clear\n        delete fn.request\n        delete fn.response\n\n        if(value !== undefined) {\n          if(value instanceof Promise) {\n            value\n              .then((data) => {\n                handleResponse(data)\n              })\n              .catch((err) => {\n                handleResponse(err)\n              })\n          } else {\n            handleResponse(value)\n          }\n        }\n      })\n    }\n\n    /**\n     * This metadata is created in addSocketListener method\n     */\n    ModuleContainer.nodeSpringApp.addSocketListeners(namespace, moduleInfo.socketListeners, moduleInfo.impl)\n\n    // Bind index method\n    ModuleContainer.nodeSpringApp.bindURL('get', `/${path}`, (req, res) => {\n      processRequest(req, res, {methodName: 'index'})\n    })\n\n    // Bind the other endpoints\n    moduleInfo.methods.forEach((methodInfo) => {\n      ModuleContainer.nodeSpringApp.bindURL(methodInfo.httpMethod, `/${path}/${methodInfo.methodName}`, (req, res) => {\n        processRequest(req, res, methodInfo)\n      })\n    })\n  }\n\n  static addRoute(moduleDef, methodName, httpMethod, contentType) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n\n    modulesContainer[moduleName].methods.push({\n      methodName: methodName,\n      httpMethod: httpMethod,\n      contentType: contentType\n    })\n  }\n\n  static addSocketListener(moduleDef, methodName, options) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n\n    modulesContainer[moduleName].socketListeners.push({\n      methodName: methodName,\n      eventName: options.eventName ? options.eventName : methodName\n    })\n  }\n\n  static validateImpl(type, impl) {\n    ModuleContainer.addInterface(type.packagePath)\n\n    let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n    let implementationMethods = Object.getOwnPropertyNames(impl.prototype)\n\n    interfaceMethods.filter((methodName) => {\n      return methodName !== 'constructor'\n    }).forEach(methodName => {\n      let isMethodImplemented = implementationMethods.indexOf(methodName) >= 0\n\n      if (!isMethodImplemented) {\n        let errorMessage = `The method \"${methodName}\" declared in ${type.packagePath} is not implemented in ${impl.name}`\n        let methodNotImplemented = new NodeSpringException(errorMessage, ModuleContainer.addImplementation, 1)\n\n        nodeSpringUtil.throwNodeSpringException(methodNotImplemented)\n      } else {\n        nodeSpringUtil.getArgs(type.prototype[methodName]).forEach((param) => {\n          let implMethodParams = nodeSpringUtil.getArgs(impl.prototype[methodName])\n          let isParamPresent = implMethodParams.indexOf(param) >= 0\n\n          if (!isParamPresent) {\n            let errorMessage = `The param \"${param}\" declared in ${type.packagePath}.${methodName}(...) is not present in ${impl.name}.${methodName}(...)`\n            let missingParam = new NodeSpringException(errorMessage, ModuleContainer.addImplementation, 1)\n\n            nodeSpringUtil.throwNodeSpringException(missingParam)\n          }\n        })\n      }\n    })\n\n    return true\n  }\n\n  static addInterface(type) {\n    if (modulesContainer[type] === undefined) {\n      modulesContainer[type] = {\n        impl: null,\n        dependencies: {},\n        methods: [],\n        socketListeners: [],\n        postInjectMethodExecuted: false,\n        getInstance: () => {\n          return ModuleContainer.resolveDependencies(type)\n        }\n      }\n    }\n  }\n\n  static resolveDependencies(type) {\n    let moduleInfo = modulesContainer[type]\n    let dependencies = moduleInfo.dependencies\n\n    if (modulesContainer[type].impl && Object.keys(dependencies).length > 0) {\n      let dependenciesInstancesPromises = []\n      let mapImplVariable = {}\n\n      for(let property in dependencies) {\n        let moduleNeeded = dependencies[property]\n        let promise = modulesContainer[moduleNeeded].getInstance()\n\n        mapImplVariable[moduleNeeded] = property\n\n        dependenciesInstancesPromises.push(promise)\n      }\n\n      return new Promise((resolve, reject) => {\n\n        /**\n         * Wait for the dependencies are resolved to be injected\n         * in the instance that's being created\n         */\n\n        Promise.all(dependenciesInstancesPromises).then((instances) => {\n\n          let mainInstance = modulesContainer[type].impl.scope === 'prototype' ? new modulesContainer[type].impl() : modulesContainer[type].impl\n\n          instances.forEach((instanceToInject) => {\n            let varType = instanceToInject.constructor.interfacePackagePath || instanceToInject.packagePath\n            let property = mapImplVariable[varType]\n\n            mainInstance[property] = instanceToInject\n          })\n\n          // Call the init method once all the dependencies are created and injected\n          let postInjectMethod = modulesContainer[type].postInjectMethod\n\n          if(postInjectMethod && !modulesContainer[type].postInjectMethodExecuted) {\n            modulesContainer[type].postInjectMethodExecuted = true\n            mainInstance[postInjectMethod]()\n\n            delete modulesContainer[type].postInjectMethod\n          }\n\n          // Resolve the complete instance to the modules which are waiting for it\n          resolve(mainInstance)\n        }).catch((err) => {\n          nodeSpringUtil.error('Error resolving instance for', type, err)\n          reject(err)\n        })\n      })\n    } else {\n\n      /**\n       * If the module doesn't have dependencies, returns the impl if it's loaded or\n       * will wait for the implementation that is loaded to dispatch the instance.\n       */\n\n      return new Promise((resolve, reject) => {\n        if(modulesContainer[type].impl) {\n          if(modulesContainer[type].impl.scope) {\n            if(modulesContainer[type].impl.scope === 'singleton') {\n              resolve(modulesContainer[type].impl)\n            }\n            else if(modulesContainer[type].impl.scope === 'prototype')\n              resolve(new modulesContainer[type].impl())\n          } else {\n            resolve(modulesContainer[type].impl)\n          }\n        } else {\n          Object.observe(modulesContainer[type], (changes) => {\n            let change = changes.filter((change) => change.type === 'update')[0]\n\n            if(Object.keys(modulesContainer[type].dependencies).length > 0) {\n              modulesContainer[type].getInstance().then((instance) => {\n                resolve(instance)\n              })\n            } else {\n              resolve(!modulesContainer[type].impl.scope ? modulesContainer[type].impl : new modulesContainer[type].impl())\n            }\n          })\n        }\n      })\n    }\n  }\n\n  static addDependency(type, property, typeToInject) {\n    ModuleContainer.addInterface(type)\n    modulesContainer[type].dependencies[property] = typeToInject.packagePath\n  }\n\n  static addImplementation(type, impl) {\n    if(ModuleContainer.validateImpl(type, impl)) {\n      modulesContainer[type.packagePath].impl = (impl.scope === 'prototype') ? impl : new impl()\n      ModuleContainer.resolveDependencies(type.packagePath)\n    }\n  }\n\n  static addPostInjectMethod(type, methodName) {\n    ModuleContainer.addInterface(type)\n    modulesContainer[type].postInjectMethod = methodName\n  }\n\n  static getModuleContainer() {\n    return modulesContainer\n  }\n}\n"]}