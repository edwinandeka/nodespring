{"version":3,"sources":["../../src/core/NodeSpringUtil.js"],"names":["NodeSpringUtil","func","args","toString","match","split","map","arg","replace","trim","filter","loggingSync","logFile","fs","createWriteStream","flags","logStdout","process","stdout","console","log","write","util","format","apply","arguments","error","logging","debugging","exception","stack","param","constructor","Function","origPrepareStackTrace","Error","prepareStackTrace","_","err","shift","length","frame","getFileName"],"mappings":";;;;;;;;;mBAAA;;;;;AAKA;;;;AACA;;;;;;;;IAEqBA,c;;;;;;;;;AAMnB;;;;;;4BAMgBC,I,EAAM;;AAEpB;AACA,UAAIC,OAAOD,KAAKE,QAAL,GAAgBC,KAAhB,CAAsB,0BAAtB,EAAkD,CAAlD,CAAX;;AAEA;AACA,aAAOF,KAAKG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,UAACC,GAAD,EAAS;;AAElC;AACA,eAAOA,IAAIC,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,EAA8BC,IAA9B,EAAP;AACD,OAJM,EAIJC,MAJI,CAIG,UAACH,GAAD,EAAS;;AAEjB;AACA,eAAOA,GAAP;AACD,OARM,CAAP;AASD;;AAED;;;;;;;wCAI2BI,W,EAAa;AACtCX,qBAAeW,WAAf,GAA6BA,WAA7B;;AAEA,UAAGX,eAAeW,WAAlB,EACA;AACE,YAAIC,UAAUC,aAAGC,iBAAH,CAAqB,gBAArB,EAAuC,EAAEC,OAAO,GAAT,EAAvC,CAAd;AACA,YAAIC,YAAYC,QAAQC,MAAxB;;AAEAC,gBAAQC,GAAR,GAAc,YAAY;AACxBR,kBAAQS,KAAR,CAAcC,eAAKC,MAAL,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,IAAqC,IAAnD;AACAT,oBAAUK,KAAV,CAAgBC,eAAKC,MAAL,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,IAAqC,IAArD;AACD,SAHD;AAIAN,gBAAQO,KAAR,GAAgBP,QAAQC,GAAxB;AACD;AACF;;;0BAEY;AACX,UAAGpB,eAAe2B,OAAlB,EACER,QAAQC,GAAR,CAAYI,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB;AACH;;;4BAEc;AACb,UAAGzB,eAAe2B,OAAlB,EACER,QAAQO,KAAR,CAAcF,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACH;;;4BAEc;AACb,UAAGzB,eAAe4B,SAAlB,EAA6B;AAC3BT,gBAAQC,GAAR,CAAYI,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB;AACD;AACF;;AAED;;;;;;;;6CAKgCI,S,EAAW;;AAEzC,UAAGA,aAAa,OAAOA,UAAUC,KAAjB,KAA2B,QAA3C,EAAqD;AACnDX,gBAAQO,KAAR,CAAc,IAAd,EAAoBG,UAAUC,KAA9B;AACD;;AAED,YAAMD,SAAN;AACD;;AAED;;;;;;;;;4BAMeE,K,EAAO;AACpB,aAAOA,SAASA,MAAMC,WAAN,KAAsBC,QAAtC;AACD;;AAED;;;;;;;+BAIkB;AAChB;AACA,UAAIC,wBAAwBC,MAAMC,iBAAlC;;AAEA;AACAD,YAAMC,iBAAN,GAA0B,UAAUC,CAAV,EAAaP,KAAb,EAAoB;AAC5C,eAAOA,KAAP;AACD,OAFD;;AAIA;AACA,UAAIQ,MAAM,IAAIH,KAAJ,EAAV;;AAEA;AACA,UAAIL,QAAQQ,IAAIR,KAAhB;;AAEA;AACAK,YAAMC,iBAAN,GAA0BF,qBAA1B;;AAEA;AACAJ,YAAMS,KAAN;AACAT,YAAMS,KAAN;;AAEA,UAAGT,MAAMU,MAAN,GAAe,CAAlB,EAAqB;AACnB,YAAIC,QAAQX,MAAM,CAAN,CAAZ;;AAEA,eAAOW,MAAMC,WAAN,EAAP;AACD,OAJD,MAIO,OAAO,EAAP;AACR;;;;YAtHMf,O,GAAU,K,SACVhB,W,GAAc,K,SACdiB,S,GAAY,K;kBAJA5B,c","file":"NodeSpringUtil.js","sourcesContent":["/**\n * NodeSpringUtil\n * @author calbertts\n */\n\nimport fs from 'fs'\nimport util from 'util'\n\nexport default class NodeSpringUtil {\n\n  static logging = false\n  static loggingSync = false\n  static debugging = false\n\n  /**\n   * Method to get the arguments' names\n   *\n   * @param func\n   * @returns {Array.<String>}\n   */\n  static getArgs (func) {\n\n    // First match everything inside the function argument parens.\n    let args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1]\n\n    // Split the arguments string into an array comma delimited.\n    return args.split(',').map((arg) => {\n\n      // Ensure no inline comments are parsed and trim the whitespace.\n      return arg.replace(/\\/\\*.*\\*\\//, '').trim()\n    }).filter((arg) => {\n\n      // Ensure no undefined values are added.\n      return arg\n    })\n  }\n\n  /**\n   * Send all the console.log/error output to a file\n   * This is pretty useful to see a synchronous log\n   */\n  static configureLoggingOut(loggingSync) {\n    NodeSpringUtil.loggingSync = loggingSync\n\n    if(NodeSpringUtil.loggingSync)\n    {\n      let logFile = fs.createWriteStream('nodespring.log', { flags: 'w' })\n      let logStdout = process.stdout\n\n      console.log = function () {\n        logFile.write(util.format.apply(null, arguments) + '\\n')\n        logStdout.write(util.format.apply(null, arguments) + '\\n')\n      }\n      console.error = console.log\n    }\n  }\n\n  static log() {\n    if(NodeSpringUtil.logging)\n      console.log.apply(this, arguments)\n  }\n\n  static error() {\n    if(NodeSpringUtil.logging)\n      console.error.apply(this, arguments)\n  }\n\n  static debug() {\n    if(NodeSpringUtil.debugging) {\n      console.log.apply(this, arguments)\n    }\n  }\n\n  /**\n   * This method gives a specific format for exceptions and stop the application\n   *\n   * @param exception Exception to throw\n   */\n  static throwNodeSpringException(exception) {\n\n    if(exception && typeof exception.stack === 'string') {\n      console.error('\\n', exception.stack)\n    }\n\n    throw exception\n  }\n\n  /**\n   * Method to check if a value is a class\n   *\n   * @param param Any kind of object to check if it's a class\n   * @returns {*|boolean}\n   */\n  static isClass(param) {\n    return param && param.constructor === Function\n  }\n\n  /**\n   * Returns the stack from the caller discarding the two first elements\n   * @returns {void|string|XML|*}\n   */\n  static getStack() {\n    // Save original Error.prepareStackTrace\n    var origPrepareStackTrace = Error.prepareStackTrace\n\n    // Override with function that just returns `stack`\n    Error.prepareStackTrace = function (_, stack) {\n      return stack\n    }\n\n    // Create a new `Error`, which automatically gets `stack`\n    var err = new Error()\n\n    // Evaluate `err.stack`, which calls our new `Error.prepareStackTrace`\n    var stack = err.stack\n\n    // Restore original `Error.prepareStackTrace`\n    Error.prepareStackTrace = origPrepareStackTrace\n\n    // Remove superfluous function call on stack\n    stack.shift()\n    stack.shift()\n\n    if(stack.length > 0) {\n      let frame = stack[0]\n\n      return frame.getFileName()\n    } else return ''\n  }\n}\n"]}