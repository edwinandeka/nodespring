{"version":3,"sources":["../../src/exceptions/NodeSpringException.js"],"names":["NodeSpringException","message","stackStartFunction","stackOffset","stackLimit","name","undefined","Error","prepareStackTrace","err","stack","stack2","slice","length","global","NodeSpringConfig","printExceptions","console","error","forEach","frame","getFunctionName","getFileName","getLineNumber","getColumnNumber","captureStackTrace","util","inherits"],"mappings":";;;;;;AAOA;;;;;;AAGA,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,kBAAtC,EAA0DC,WAA1D,EAAuEC,UAAvE,EAAmF;AAAA;;AACjF,OAAKH,OAAL,GAAeA,OAAf;AACA,OAAKI,IAAL,GAAY,qBAAZ;AACA,OAAKH,kBAAL,GAA0BA,kBAA1B;;AAEA,MAAGC,gBAAgBG,SAAnB,EAA8B;AAC5BC,UAAMC,iBAAN,GAA0B,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACxC,UAAIC,SAASD,MAAME,KAAN,CAAYT,WAAZ,EAAyBC,cAAcM,MAAMG,MAA7C,CAAb;;AAEA,UAAGC,OAAOC,gBAAP,IAA2BD,OAAOC,gBAAP,CAAwBC,eAAtD,EAAuE;AACrEC,gBAAQC,KAAR,CAAc,IAAd,EAAoB,MAAKb,IAAzB,EAA+BJ,OAA/B;AACAU,eAAOQ,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBH,kBAAQC,KAAR,CAAc,sBAAd,EACIE,MAAMC,eAAN,MAA2B,WAD/B,EAEID,MAAME,WAAN,EAFJ,EAGIF,MAAMG,aAAN,EAHJ,EAIIH,MAAMI,eAAN,EAJJ;AAMD,SAPD;AAQD;AACF,KAdD;AAeD;;AAEDjB,QAAMkB,iBAAN,CAAwB,IAAxB,EAA8BvB,kBAA9B;AACD,C,CAlCD;;;;;;;AAoCAwB,eAAKC,QAAL,CAAc3B,mBAAd,EAAmCO,KAAnC;;kBAEeP,mB","file":"NodeSpringException.js","sourcesContent":["/**\n * NodeSpringExceptions\n *\n * @param options\n * @constructor\n */\n\nimport util from 'util'\n\n\nfunction NodeSpringException(message, stackStartFunction, stackOffset, stackLimit) {\n  this.message = message\n  this.name = 'NodeSpringException'\n  this.stackStartFunction = stackStartFunction\n\n  if(stackOffset !== undefined) {\n    Error.prepareStackTrace = (err, stack) => {\n      let stack2 = stack.slice(stackOffset, stackLimit || stack.length)\n\n      if(global.NodeSpringConfig && global.NodeSpringConfig.printExceptions) {\n        console.error('\\n', this.name, message)\n        stack2.forEach((frame) => {\n          console.error('    at %s (%s:%d:%d)'\n            , frame.getFunctionName() || 'anonymous'\n            , frame.getFileName()\n            , frame.getLineNumber()\n            , frame.getColumnNumber()\n          )\n        })\n      }\n    }\n  }\n\n  Error.captureStackTrace(this, stackStartFunction)\n}\n\nutil.inherits(NodeSpringException, Error)\n\nexport default NodeSpringException"]}